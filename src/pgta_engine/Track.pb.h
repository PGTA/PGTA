// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Track.proto

#ifndef PROTOBUF_Track_2eproto__INCLUDED
#define PROTOBUF_Track_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PGTA {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Track_2eproto();
void protobuf_AssignDesc_Track_2eproto();
void protobuf_ShutdownFile_Track_2eproto();

class Track;
class Track_Sample;
class Track_Group;

// ===================================================================

class Track_Sample : public ::google::protobuf::Message {
 public:
  Track_Sample();
  virtual ~Track_Sample();

  Track_Sample(const Track_Sample& from);

  inline Track_Sample& operator=(const Track_Sample& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Track_Sample& default_instance();

  void Swap(Track_Sample* other);

  // implements Message ----------------------------------------------

  Track_Sample* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Track_Sample& from);
  void MergeFrom(const Track_Sample& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filePath = 1;
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilePathFieldNumber = 1;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  inline ::std::string* release_filepath();
  inline void set_allocated_filepath(::std::string* filepath);

  // optional uint64 frequency = 2 [default = 1000];
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  inline ::google::protobuf::uint64 frequency() const;
  inline void set_frequency(::google::protobuf::uint64 value);

  // optional uint32 probability = 3 [default = 0];
  inline bool has_probability() const;
  inline void clear_probability();
  static const int kProbabilityFieldNumber = 3;
  inline ::google::protobuf::uint32 probability() const;
  inline void set_probability(::google::protobuf::uint32 value);

  // optional float volumeMultiplier = 4 [default = 1];
  inline bool has_volumemultiplier() const;
  inline void clear_volumemultiplier();
  static const int kVolumeMultiplierFieldNumber = 4;
  inline float volumemultiplier() const;
  inline void set_volumemultiplier(float value);

  // @@protoc_insertion_point(class_scope:PGTA.Track.Sample)
 private:
  inline void set_has_filepath();
  inline void clear_has_filepath();
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_probability();
  inline void clear_has_probability();
  inline void set_has_volumemultiplier();
  inline void clear_has_volumemultiplier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filepath_;
  ::google::protobuf::uint64 frequency_;
  ::google::protobuf::uint32 probability_;
  float volumemultiplier_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Track_2eproto();
  friend void protobuf_AssignDesc_Track_2eproto();
  friend void protobuf_ShutdownFile_Track_2eproto();

  void InitAsDefaultInstance();
  static Track_Sample* default_instance_;
};
// -------------------------------------------------------------------

class Track_Group : public ::google::protobuf::Message {
 public:
  Track_Group();
  virtual ~Track_Group();

  Track_Group(const Track_Group& from);

  inline Track_Group& operator=(const Track_Group& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Track_Group& default_instance();

  void Swap(Track_Group* other);

  // implements Message ----------------------------------------------

  Track_Group* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Track_Group& from);
  void MergeFrom(const Track_Group& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 sampleIndex = 1 [packed = true];
  inline int sampleindex_size() const;
  inline void clear_sampleindex();
  static const int kSampleIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 sampleindex(int index) const;
  inline void set_sampleindex(int index, ::google::protobuf::uint32 value);
  inline void add_sampleindex(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sampleindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sampleindex();

  // @@protoc_insertion_point(class_scope:PGTA.Track.Group)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sampleindex_;
  mutable int _sampleindex_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Track_2eproto();
  friend void protobuf_AssignDesc_Track_2eproto();
  friend void protobuf_ShutdownFile_Track_2eproto();

  void InitAsDefaultInstance();
  static Track_Group* default_instance_;
};
// -------------------------------------------------------------------

class Track : public ::google::protobuf::Message {
 public:
  Track();
  virtual ~Track();

  Track(const Track& from);

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Track& default_instance();

  void Swap(Track* other);

  // implements Message ----------------------------------------------

  Track* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Track_Sample Sample;
  typedef Track_Group Group;

  // accessors -------------------------------------------------------

  // repeated .PGTA.Track.Sample samples = 1;
  inline int samples_size() const;
  inline void clear_samples();
  static const int kSamplesFieldNumber = 1;
  inline const ::PGTA::Track_Sample& samples(int index) const;
  inline ::PGTA::Track_Sample* mutable_samples(int index);
  inline ::PGTA::Track_Sample* add_samples();
  inline const ::google::protobuf::RepeatedPtrField< ::PGTA::Track_Sample >&
      samples() const;
  inline ::google::protobuf::RepeatedPtrField< ::PGTA::Track_Sample >*
      mutable_samples();

  // repeated .PGTA.Track.Group groups = 2;
  inline int groups_size() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 2;
  inline const ::PGTA::Track_Group& groups(int index) const;
  inline ::PGTA::Track_Group* mutable_groups(int index);
  inline ::PGTA::Track_Group* add_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::PGTA::Track_Group >&
      groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::PGTA::Track_Group >*
      mutable_groups();

  // @@protoc_insertion_point(class_scope:PGTA.Track)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PGTA::Track_Sample > samples_;
  ::google::protobuf::RepeatedPtrField< ::PGTA::Track_Group > groups_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Track_2eproto();
  friend void protobuf_AssignDesc_Track_2eproto();
  friend void protobuf_ShutdownFile_Track_2eproto();

  void InitAsDefaultInstance();
  static Track* default_instance_;
};
// ===================================================================


// ===================================================================

// Track_Sample

// optional string filePath = 1;
inline bool Track_Sample::has_filepath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Track_Sample::set_has_filepath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Track_Sample::clear_has_filepath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Track_Sample::clear_filepath() {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    filepath_->clear();
  }
  clear_has_filepath();
}
inline const ::std::string& Track_Sample::filepath() const {
  return *filepath_;
}
inline void Track_Sample::set_filepath(const ::std::string& value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void Track_Sample::set_filepath(const char* value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void Track_Sample::set_filepath(const char* value, size_t size) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track_Sample::mutable_filepath() {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  return filepath_;
}
inline ::std::string* Track_Sample::release_filepath() {
  clear_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filepath_;
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Track_Sample::set_allocated_filepath(::std::string* filepath) {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (filepath) {
    set_has_filepath();
    filepath_ = filepath;
  } else {
    clear_has_filepath();
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 frequency = 2 [default = 1000];
inline bool Track_Sample::has_frequency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Track_Sample::set_has_frequency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Track_Sample::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Track_Sample::clear_frequency() {
  frequency_ = GOOGLE_ULONGLONG(1000);
  clear_has_frequency();
}
inline ::google::protobuf::uint64 Track_Sample::frequency() const {
  return frequency_;
}
inline void Track_Sample::set_frequency(::google::protobuf::uint64 value) {
  set_has_frequency();
  frequency_ = value;
}

// optional uint32 probability = 3 [default = 0];
inline bool Track_Sample::has_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Track_Sample::set_has_probability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Track_Sample::clear_has_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Track_Sample::clear_probability() {
  probability_ = 0u;
  clear_has_probability();
}
inline ::google::protobuf::uint32 Track_Sample::probability() const {
  return probability_;
}
inline void Track_Sample::set_probability(::google::protobuf::uint32 value) {
  set_has_probability();
  probability_ = value;
}

// optional float volumeMultiplier = 4 [default = 1];
inline bool Track_Sample::has_volumemultiplier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Track_Sample::set_has_volumemultiplier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Track_Sample::clear_has_volumemultiplier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Track_Sample::clear_volumemultiplier() {
  volumemultiplier_ = 1;
  clear_has_volumemultiplier();
}
inline float Track_Sample::volumemultiplier() const {
  return volumemultiplier_;
}
inline void Track_Sample::set_volumemultiplier(float value) {
  set_has_volumemultiplier();
  volumemultiplier_ = value;
}

// -------------------------------------------------------------------

// Track_Group

// repeated uint32 sampleIndex = 1 [packed = true];
inline int Track_Group::sampleindex_size() const {
  return sampleindex_.size();
}
inline void Track_Group::clear_sampleindex() {
  sampleindex_.Clear();
}
inline ::google::protobuf::uint32 Track_Group::sampleindex(int index) const {
  return sampleindex_.Get(index);
}
inline void Track_Group::set_sampleindex(int index, ::google::protobuf::uint32 value) {
  sampleindex_.Set(index, value);
}
inline void Track_Group::add_sampleindex(::google::protobuf::uint32 value) {
  sampleindex_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Track_Group::sampleindex() const {
  return sampleindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Track_Group::mutable_sampleindex() {
  return &sampleindex_;
}

// -------------------------------------------------------------------

// Track

// repeated .PGTA.Track.Sample samples = 1;
inline int Track::samples_size() const {
  return samples_.size();
}
inline void Track::clear_samples() {
  samples_.Clear();
}
inline const ::PGTA::Track_Sample& Track::samples(int index) const {
  return samples_.Get(index);
}
inline ::PGTA::Track_Sample* Track::mutable_samples(int index) {
  return samples_.Mutable(index);
}
inline ::PGTA::Track_Sample* Track::add_samples() {
  return samples_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PGTA::Track_Sample >&
Track::samples() const {
  return samples_;
}
inline ::google::protobuf::RepeatedPtrField< ::PGTA::Track_Sample >*
Track::mutable_samples() {
  return &samples_;
}

// repeated .PGTA.Track.Group groups = 2;
inline int Track::groups_size() const {
  return groups_.size();
}
inline void Track::clear_groups() {
  groups_.Clear();
}
inline const ::PGTA::Track_Group& Track::groups(int index) const {
  return groups_.Get(index);
}
inline ::PGTA::Track_Group* Track::mutable_groups(int index) {
  return groups_.Mutable(index);
}
inline ::PGTA::Track_Group* Track::add_groups() {
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PGTA::Track_Group >&
Track::groups() const {
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::PGTA::Track_Group >*
Track::mutable_groups() {
  return &groups_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PGTA

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Track_2eproto__INCLUDED
